name: Generate ChangeLog
inputs:
  # NOTE: 基本的にsecrets.GITHUB_TOKENでまかなえる想定
  # ghch経由でのGitHubAPIの呼び出し回数の上限に当たる場合、個人アカウントからTOKENを払い出して設定する必要がある
  token:
    description: GITHUB_TOKEN
    required: true
  branch:
    required: true
outputs:
  changelog:
    description: "Generated ChangeLog"
    value: ${{ steps.generator.outputs.changelog }}
runs:
  using: "composite"
  steps:
    - name: Validation
      run: |
        # main, stagingブランチ以外の入力は拒否
        if [ ${{inputs.branch}} != "main" ] && [ ${{inputs.branch}} != "staging" ]; then
          echo "ブランチの指定は[main, staging]のみ許可されています"
          exit 1
        fi
      shell: bash
    - uses: actions/checkout@v3
      with:
        ref: ${{inputs.branch}}
        fetch-depth: 0
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18
    - name: Get Package
      run: go install github.com/Songmu/ghch/cmd/ghch@latest
      shell: bash
    - name: Generate
      id: generator
      run: |
        # 最新のchangelogを生成
        generated=$(ghch --latest)

        # ghchの生成物から必要なプロパティのみを抽出
        # 抽出後
        # {
        #   "changed_at": "2023-02-08T13:12:46+09:00",
        #   "from_revision": "20230208.13.05",
        #   "to_revision": "20230208.13.13",
        #   "pull_requests": [
        #     {
        #       "title": "feat: 機能B"
        #     },
        #     {
        #       "title": "feat: 機能A"
        #     }
        #   ]
        # }
        filtered=$(echo $generated | jq '. | { changed_at: .changed_at, from_revision: .from_revision, to_revision: .to_revision, pull_requests: .pull_requests | map({title: .title}) }')

        # PRのタイトルのprefixがfeat,fix以外のものは除去
        # 除去前
        # "pull_requests": [
        #   {
        #     "title": "release(stg): 20230208_02"
        #   },
        #   {
        #     "title": "feat: 機能B"
        #   },
        #   {
        #     "title": "feat: 機能A"
        #   },
        #   {
        #     "title": "chore: rename"
        #   }
        # ]
        # 除去後
        # "pull_requests": [
        #   {
        #     "title": "feat: 機能B"
        #   },
        #   {
        #     "title": "feat: 機能A"
        #   }
        # ]
        filter_type=$(echo $filtered | jq 'del(. | .pull_requests[] | select(.title | test("(feat|fix)") | not))')

        # PRの並びを日付の降順から昇順へリバース
        # [
        #   {
        #     "title": "feat: 機能A"
        #   },
        #   {
        #     "title": "feat: 機能B"
        #   }
        # ]
        reversed=$(echo $filter_type | jq '.pull_requests | reverse')

        # リバースしたPRのリストで値を置換
        # {
        #   "changed_at": "2023-02-08T13:12:46+09:00",
        #   "from_revision": "20230208.13.05",
        #   "to_revision": "20230208.13.13",
        #   "pull_requests": [
        #     {
        #       "title": "feat: 機能A"
        #     },
        #     {
        #       "title": "feat: 機能B"
        #     }
        #   ]
        # }
        # replaced=$(echo $filter_type | jq '.pull_requests |= '$reversed)

        # オブジェクトのリストを配列でラップ
        result=$(echo $filter_type | jq -s .)

        echo "changelog='$(echo $result)'" > $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{inputs.token}}
      shell: bash
    - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash
